#! /usr/bin/perl

#-----------------------------------------------------------------------------
# POD Format Documentation.  Read "perldoc perlpod" for an example.
# When done, check syntax with "podchecker".

=head1 NAME

buildllvm - build llvm/mlir with RTTI

=head1 SYNOPSIS

buildllvm [--help] [--dryrun] [--clang] [--flang] [--cir]

=head1 DESCRIPTION

Options:

=over 4

=item --dryrun

Don't actually run the commands, just show them.

=item --clang

Include clang in the build.

=item --flang

Include flang in the build.

=item --cir

Include cir (clang-ir dialect) in the clang build.

=back

=head1 SUPPORTED PLATFORMS

 Unix (Linux verified)

=head1 SUPPORT

 Send email to peeterjoot@pm.me

=head1 AUTHORS

 Peeter Joot

=cut

#-----------------------------------------------------------------------------

use strict ;
use warnings ;
use Getopt::Long ;
use Pod::Usage ;

# Suppress sourcing of users' .bashrc files in invoked shells
delete $ENV{'ENV'} ;
delete $ENV{'BASH_ENV'} ;

# Set STDOUT and STDERR to unbuffered
select STDERR ; $| = 1 ;
select STDOUT ; $| = 1 ;

my $myName = '' ;
my $dryrun = 0;
my $clang = 0;
my $flang = 0;
my $cir = 0;

($myName = $0) =~ s@.*[/\\]@@ ;

#Getopt::Long::Configure( 'pass_through' ) ;
GetOptions (
   'help'               => sub { pod2usage(-verbose => 2) ; },
   'dryrun!'            => \$dryrun,
   'clang!'             => \$clang,
   'flang!'             => \$flang,
   'cir!'           => \$cir,
) or pod2usage(-verbose => 0) ;

# Validate/handle options, and everything else...

my $HOME = $ENV{'HOME'};

mychdir( "$HOME/llvm-project" );

# commit 7b09d7b446383b71b63d429b21ee45ba389c5134 (HEAD, tag: llvmorg-20.1.5)
my $version = `git log -n 1 --decorate | head -1` ; chomp $version;
print "# COMMIT: $version\n";
$version =~ s/.*tag: llvmorg-// or die;
$version =~ s/\).*//;
$version =~ s/,.*//;
#die "'$version'";

my $builddir = "$HOME/build-llvm";
mysystem( "(rm -rf $builddir && mkdir $builddir)" );
mychdir( $builddir );

if ( !(-d "$HOME/llvm-project") )
{
    mysystem( "(cd && git clone https://github.com/llvm/llvm-project.git && git checkout llvmorg-20.1.5)" );
}

my $arch = `uname -m` ; chomp $arch;
my $targets = 'X86';
if ( $arch eq 'aarch64' )
{
    $targets = 'ARM';
}

my %projects = ( 'mlir' => 1 );
my @projects = (qw(mlir));

if ( $clang or $cir or $flang )
{
    $projects{'clang'}++;
}

if ( $flang )
{
    $projects{'flang'}++;
}

my $cmakeflags = '';
if ( $cir )
{
    $cmakeflags .= '-DCLANG_ENABLE_CIR=ON ';
}

my $projects = join( ';', sort keys %projects );

# By default need to compile code that uses llvm/mlir with -fno-rtti, or else we get link errors.
# However, antlr4 uses dynamic-cast, so we have to enable rtti if using that.

my $instdir = "/usr/local/llvm-$version";
my $buildtype = 'Debug';
#$buildtype = 'Release';

my $parallel = '';

# try to avoid the Linux OOM killer when building clang:
$parallel = '-j3' if ( $projects{'clang'} );

my @cmds = ( qq(cmake ) .
             qq(-G ) .
             qq(Ninja ) .
             qq(../llvm-project/llvm ) .
             qq(-DBUILD_SHARED_LIBS=true ) .
             qq(-DCMAKE_EXPORT_COMPILE_COMMANDS=ON ) .
             qq(-DCMAKE_BUILD_TYPE=${buildtype} ) .
             qq(-DLLVM_ENABLE_ASSERTIONS=TRUE ) .
             qq(-DLLVM_OPTIMIZED_TABLEGEN=ON ) .
             qq(-DLLVM_LIBDIR_SUFFIX=64 ) .
             qq(-DCMAKE_INSTALL_RPATH=${instdir}/lib64 ) .
             qq(-DLLVM_TARGETS_TO_BUILD="${targets}" ) .
             qq(-DCMAKE_INSTALL_PREFIX=${instdir} ) .
             qq(-DLLVM_ENABLE_RTTI=ON ) .
             qq(-DLLVM_ENABLE_PROJECTS='${projects}' ) .
             $cmakeflags,

             qq(ninja ${parallel}),

             qq(sudo rm -rf ${instdir}),

             qq(sudo ninja install) );

foreach ( @cmds )
{
    mysystem( $_ );
}

exit;

sub mysystem
{
    my ($cmd) = @_;

    print "$cmd\n";

    unless ( $dryrun ) {
        system( $cmd );
        my $rc = $? >> 8;

        exit( $rc ) if ( $rc );
    }
}

sub mychdir
{
    my ($dir) = @_;

    print "cd $dir\n";

    if ( $dryrun )
    {
        chdir $dir;
    }
    else
    {
        chdir $dir or die;
    }
}

# vim: et ts=4 sw=4
