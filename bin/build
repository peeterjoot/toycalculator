#!/usr/bin/perl

#-----------------------------------------------------------------------------
# POD Format Documentation.  Read "perldoc perlpod" for an example.
# When done, check syntax with "podchecker".

=head1 NAME

build - delete and recreate the build directory, run the cmake ninja generator and ninja.

=head1 SYNOPSIS

build [--help] [--serial] [--[no-]cscope] [--[no-]build] [--hack] [--no-ccache]

=head1 DESCRIPTION

Configure, build, and optionally run cscope database build step.

=head1 SUPPORTED PLATFORMS

 Unix (Linux verified)

=head1 SUPPORT

 Send email to peeterjoot@pm.me

=head1 AUTHORS

 Peeter Joot

=cut

#-----------------------------------------------------------------------------

use strict ;
use warnings ;
use Getopt::Long ;
use Pod::Usage ;

# Suppress sourcing of users' .bashrc files in invoked shells
delete $ENV{'ENV'} ;
delete $ENV{'BASH_ENV'} ;

# Set STDOUT and STDERR to unbuffered
select STDERR ; $| = 1 ;
select STDOUT ; $| = 1 ;

my $myName = '' ;
my $doscope = 0;
my $dobuild = 1;
my $serial = 0;
my $hack = 0;
my $ccache = 1;
($myName = $0) =~ s@.*[/\\]@@ ;

#Getopt::Long::Configure( 'pass_through' ) ;
GetOptions (
   'help'               => sub { pod2usage(-verbose => 2) ; },
   'cscope!'		      => \$doscope,
   'build!'		         => \$dobuild,
   'serial!'	         => \$serial,
   'hack!'	            => \$hack,
   'ccache!'	         => \$ccache,
) or pod2usage(-verbose => 0) ;

# Didn't pick consistent install prefixes for my mlir builds (WSL2/Ubuntu, and Fedora-42)... find it:
my @prefix = <"/usr/local/llvm-*">;
die unless ( scalar(@prefix) eq 1 );
my $prefix = $prefix[0];
my $parallel = '';
if ( $serial ) {
   $parallel = '-j 1';
}

my $flags = '';

# gcc-13 is too old:
#
#  c++: error: unrecognized command-line option ‘-fdiagnostics-all-candidates’
#
# ... which is very useful for all the MLIR template overloads.
if ( defined $ENV{'WSL_DISTRO_NAME'} )
{
   $flags .= '-DCMAKE_CXX_COMPILER=/usr/bin/g++-14 ';
   $flags .= '-DCMAKE_C_COMPILER=/usr/bin/gcc-14 ';
}
elsif ( $ccache )
{
   # without PATH for ccache:
   $flags .= '-DCMAKE_CXX_COMPILER=clang++ ';
   $flags .= '-DCMAKE_C_COMPILER=clang ';
}
else
{
   $flags .= '-DCMAKE_CXX_COMPILER=/usr/bin/clang++ ';
   $flags .= '-DCMAKE_C_COMPILER=/usr/bin/clang ';
}

# for a compilation database:
$flags .= '-DCMAKE_EXPORT_COMPILE_COMMANDS=ON ';
$flags .= '-DCMAKE_BUILD_TYPE=Debug ';

if ( $hack )
{
   $flags .= '-DHACK_BUILDER=1 ';
}

if ( $dobuild ) {
   mysystem(qq(
set -x

rm -rf build
mkdir build
cd build

cmake -G Ninja $flags -DLLVM_DIR=$prefix/lib64/cmake/llvm -DMLIR_DIR=$prefix/lib64/cmake/mlir ..

ninja -v -k 3 ${parallel} 2>&1 | tee o | grep error: | tee e

tail o
));
}

if ( $doscope ) {
   mysystem( "my_scope --build --searchdir $prefix --verbose --index inc" );
}

exit 0;

sub mysystem
{
   my ($cmd) = @_;

   print "# $cmd\n";

   system( $cmd );
}

# vim: et ts=3 sw=3
