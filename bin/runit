#!/usr/bin/perl

#-----------------------------------------------------------------------------
# POD Format Documentation.  Read "perldoc perlpod" for an example.
# When done, check syntax with "podchecker".

=head1 NAME

runit - <one-line-description>

=head1 SYNOPSIS

runit [--help] [<options>]

=head1 DESCRIPTION


Options:

=over 4

=item --foo=bar

Blah.

=back

=head1 SUPPORTED PLATFORMS

 Unix (Linux verified)

=head1 SUPPORT

 Send email to peeterjoot@pm.me

=head1 AUTHORS

 Peeter Joot

=cut

#-----------------------------------------------------------------------------

use strict ;
use warnings ;
use Getopt::Long ;
use Pod::Usage ;

# Suppress sourcing of users' .bashrc files in invoked shells
delete $ENV{'ENV'} ;
delete $ENV{'BASH_ENV'} ;

# Set STDOUT and STDERR to unbuffered
select STDERR ; $| = 1 ;
select STDOUT ; $| = 1 ;

my $myName = '' ;

($myName = $0) =~ s@.*[/\\]@@ ;
my $prog;
my $debug = 1;

Getopt::Long::Configure( 'pass_through' ) ;
GetOptions (
   'help'               => sub { pod2usage(-verbose => 2) ; },
   'j=s'                => \$prog,
   'debug!'             => \$debug,
) or pod2usage(-verbose => 0) ;

# Validate/handle options, and everything else...

unless ( defined $prog )
{
   die if ( scalar(@ARGV) != 1 );

   $prog = "@ARGV";
}

if ( !($prog =~ /\.toy/) )
{
   $prog .= '.toy';
}

unless ( $prog =~ m,/, )
{
   $prog = "../samples/$prog";
}

my $flags = '';
if ( $debug )
{
   $flags .= '-g ';
}

system( qq(../build/toycalculator $prog --stdout --emit-mlir --emit-llvm --no-emit-object --debug ${flags} 2>&1 | grep -v ImplicitTypeIDRegistry) );

# vim: et ts=3 sw=3
